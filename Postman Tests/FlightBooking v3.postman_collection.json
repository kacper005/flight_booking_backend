{
	"info": {
		"_postman_id": "2368399f-a7f8-4109-82d4-9ae3b62bfe3c",
		"name": "FlightBooking v3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41300657"
	},
	"item": [
		{
			"name": "Security",
			"item": [
				{
					"name": "Login ADMIN Chuck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save JWT to Postman environment\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"jwt_token_admin\", jsonData.jwt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"chuck@gmail.com\",\r\n    \"password\": \"Nunchucks2024\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login USER Dave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save JWT to Postman environment\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"jwt_token_user\", jsonData.jwt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"dave@gmail.com\",\r\n    \"password\": \"Dangerous2024\"\r\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new user Bruce",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"brucelee@gmail.com\",\r\n    \"password\": \"Karateking123\",\r\n    \"phone\": \"+4786250912\",\r\n    \"firstName\": \"Bruce\",\r\n    \"lastName\": \"Lee\",\r\n    \"dateOfBirth\": \"01.07.1976\",\r\n    \"country\": \"Norway\",\r\n    \"gender\": \"Male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login new user Bruce",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save JWT to Postman environment\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"jwt_token_bruce\", jsonData.jwt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"brucelee@gmail.com\",\r\n    \"password\": \"Karateking123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new user Kacper",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"kacper87922@gmail.com\",\r\n    \"password\": \"kacper1234\",\r\n    \"phone\": \"+4792058011\",\r\n    \"firstName\": \"Kacper\",\r\n    \"lastName\": \"Mrowiec\",\r\n    \"dateOfBirth\": \"16.05.2002\",\r\n    \"country\": \"Poland\",\r\n    \"gender\": \"Male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const users = pm.response.json();\r",
									"    pm.expect(users).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can not get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can add feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"This is a test\",\r\n  \"rating\": 5,\r\n  \"user\": {\r\n    \"userId\": 2\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/feedback",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can not POST a flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"flightNumber\": \"DL425\",\r\n    \"departureTime\": \"2025-08-15T08:00:00\",\r\n    \"arrivalTime\": \"2025-08-15T11:30:00\",\r\n    \"roundTrip\": false,\r\n    \"status\": \"SCHEDULED\",\r\n    \"extraFeatures\": \"Complimentary Wi-Fi, Seat-back Screens, Free Snacks\",\r\n    \"availableClasses\": \"Economy\",\r\n    \"airline\": {\r\n        \"airlineId\": 1\r\n    },\r\n    \"departureAirport\": {\r\n        \"airportId\": 1\r\n    },\r\n    \"arrivalAirport\": {\r\n        \"airportId\": 2\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add airline Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"SAS\",\n    \"code\": \"SK\",\n    \"country\": \"Norway\",\n    \"logoFileName\": \"sas\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add aiport Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vigra\",\n    \"code\": \"AES\",\n    \"city\": \"Ålesund\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airport Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Gardermoen\",\n    \"code\": \"OSL\",\n    \"city\": \"Oslo\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN can add flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"flightNumber\": \"DL425\",\r\n    \"departureTime\": \"2025-08-15T08:00:00\",\r\n    \"arrivalTime\": \"2025-08-15T11:30:00\",\r\n    \"roundTrip\": false,\r\n    \"status\": \"SCHEDULED\",\r\n    \"extraFeatures\": \"Complimentary Wi-Fi, Seat-back Screens, Free Snacks\",\r\n    \"availableClasses\": \"Economy\",\r\n    \"airline\": {\r\n        \"airlineId\": 1\r\n    },\r\n    \"departureAirport\": {\r\n        \"airportId\": 1\r\n    },\r\n    \"arrivalAirport\": {\r\n        \"airportId\": 2\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dave can see own profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has Dave's email\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.email).to.eql(\"dave@gmail.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/me",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bruce can see own profile Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has Bruce's email\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.email).to.eql(\"brucelee@gmail.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_bruce}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/me",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dave updates himself",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"dave_new@gmail.com\",\r\n    \"password\": \"Dangerous2024\",\r\n    \"phone\": \"+4711223344\",\r\n    \"firstName\": \"David\",\r\n    \"lastName\": \"Norman\",\r\n    \"dateOfBirth\": \"01.01.1991\",\r\n    \"country\": \"Norway\",\r\n    \"gender\": \"Male\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/me",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dave check updated info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated email and name for Dave\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.email).to.eql(\"dave_new@gmail.com\");\r",
									"    pm.expect(responseData.firstName).to.eql(\"David\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/me",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Login ADMIN Chuck Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save JWT to Postman environment\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"jwt_token_admin\", jsonData.jwt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"chuck@gmail.com\",\r\n    \"password\": \"Nunchucks2024\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 5 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(5);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"johndove@gmail.com\",\n    \"password\": \"johniscool11\",\n    \"phone\": \"+4799999999\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Dove\",\n    \"dateOfBirth\": \"01.01.1991\",\n    \"country\": \"Norway\",\n    \"gender\": \"Male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user with existing phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"mikedoe@gmail.com\",\n    \"password\": \"mikeiscool11\",\n    \"phone\": \"+4799999999\",\n    \"firstName\": \"Mike\",\n    \"lastName\": \"Doe\",\n    \"dateOfBirth\": \"01.01.1998\",\n    \"country\": \"Norway\",\n    \"gender\": \"Male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user with existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"johndove@gmail.com\",\n    \"password\": \"janiscool11\",\n    \"phone\": \"+4798765888\",\n    \"firstName\": \"Jan\",\n    \"lastName\": \"Doe\",\n    \"dateOfBirth\": \"01.01.2000\",\n    \"country\": \"Norway\",\n    \"gender\": \"Male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"bob.nan@gmail.com\",\n    \"password\": \"qwerty123\",\n    \"phone\": \"+3798674221\",\n    \"firstName\": \"Bob\",\n    \"lastName\": \"Nann\",\n    \"dateOfBirth\": \"02.02.2002\",\n    \"country\": \"Norway\",\n    \"gender\": \"Male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 7 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(7);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 4,\n    \"email\": \"j.doe@gmail.com\",\n    \"password\": \"johniscool11\",\n    \"phone\": \"+4798765432\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"dateOfBirth\": \"01.01.1991\",\n    \"country\": \"Norway\",\n    \"gender\": \"Male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/4",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var expectedUserData = {",
									"    userId: 4,",
									"    email: \"j.doe@gmail.com\",",
									"    password: \"johniscool11\",",
									"    phone: \"+4798765432\",",
									"    firstName: \"John\",",
									"    lastName: \"Doe\",",
									"    dateOfBirth: \"01.01.1991\",",
									"    country: \"Norway\",",
									"    gender: \"Male\",",
									"    role: null",
									"",
									"};",
									"",
									"pm.test(\"User data matches expected values (excluding createdAt)\", function () {",
									"    var actualData = pm.response.json();",
									"",
									"    pm.expect(actualData.userId).to.eql(expectedUserData.userId);",
									"    pm.expect(actualData.email).to.eql(expectedUserData.email);",
									"    pm.expect(actualData.password).to.eql(expectedUserData.password);",
									"    pm.expect(actualData.phone).to.eql(expectedUserData.phone);",
									"    pm.expect(actualData.firstName).to.eql(expectedUserData.firstName);",
									"    pm.expect(actualData.lastName).to.eql(expectedUserData.lastName);",
									"    pm.expect(actualData.dateOfBirth).to.eql(expectedUserData.dateOfBirth);",
									"    pm.expect(actualData.country).to.eql(expectedUserData.country);",
									"    pm.expect(actualData.gender).to.eql(expectedUserData.gender);",
									"    pm.expect(actualData.role).to.eql(expectedUserData.role);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/4",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ola.n@gmail.com\",\n    \"password\": \"qwerty123\",\n    \"phone\": \"+2298674511\",\n    \"firstName\": \"Ola\",\n    \"lastName\": \"Normann\",\n    \"dateOfBirth\": \"02.02.2002\",\n    \"country\": \"Norway\",\n    \"gender\": \"Male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Statuskode skal være 200 (OK)\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.sendRequest({",
									"    url: 'http://localhost:8080/users',",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': `Bearer ${pm.environment.get(\"jwt_token\")}`",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Feil ved verifisering:\", err);",
									"        return;",
									"    }",
									"",
									"    const users = res.json();",
									"    const nonAdmins = users.filter(u => u.role !== \"ADMIN\");",
									"",
									"    console.log(`Totalt brukere igjen: ${users.length}`);",
									"    console.log(`Brukere uten ADMIN-rolle: ${nonAdmins.length}`);",
									"",
									"    pm.test(\"Alle gjenværende brukere har rollen ADMIN\", function () {",
									"        pm.expect(nonAdmins.length).to.eql(0);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users final",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 1 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Airline",
			"item": [
				{
					"name": "Get all airlines initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"SAS\",\n    \"code\": \"SK\",\n    \"country\": \"Norway\",\n    \"logoFileName\": \"sas\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Norwegian\",\n    \"code\": \"DY\",\n    \"country\": \"Norway\",\n    \"logoFileName\": \"norwegian\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all airlines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 2 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get airline by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete airline 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get airline 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"airlineId\": 1,\n    \"name\": \"SAS\",\n    \"code\": \"SK\",\n    \"country\": \"Sweden\",\n    \"logoFileName\": \"sas\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var expectedUserData = {",
									"    airlineId: 1,",
									"    name: \"SAS\",",
									"    code: \"SK\",",
									"    country: \"Sweden\",",
									"    logoFileName: \"sas\",",
									"};",
									"",
									"pm.test(\"Response body matches the expected user data\", function () {",
									"    var responseJSON = pm.response.json();",
									"    pm.expect(responseJSON).to.eql(expectedUserData);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airline Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Norwegian\",\n    \"code\": \"DY\",\n    \"country\": \"Norway\",\n    \"logoUrl\": \"norwegian\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all airlines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all airlines final",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Airport",
			"item": [
				{
					"name": "Get all airports initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add aiport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vigra\",\n    \"code\": \"AES\",\n    \"city\": \"Ålesund\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Gardermoen\",\n    \"code\": \"OSL\",\n    \"city\": \"Oslo\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all airlines Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 2 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get airport by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete airport 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get airport 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"airportId\": 1,\n    \"name\": \"Bodø\",\n    \"code\": \"BDO\",\n    \"city\": \"Bodø\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var expectedUserData = {",
									"    airportId: 1,",
									"    name: \"Bodø\",",
									"    code: \"BDO\",",
									"    city: \"Bodø\",",
									"    country: \"Norway\",",
									"};",
									"",
									"pm.test(\"Response body matches the expected user data\", function () {",
									"    var responseJSON = pm.response.json();",
									"    pm.expect(responseJSON).to.eql(expectedUserData);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airport Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Gardermoen\",\n    \"code\": \"OSL\",\n    \"city\": \"Oslo\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all airports final",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Price",
			"item": [
				{
					"name": "Get all prices initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classType\": \"Economy\",\r\n  \"price\": 250.50,\r\n  \"priceProviderName\": \"Airline XYZ\",\r\n  \"currency\": \"USD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classType\": \"First Class\",\r\n  \"price\": 150,\r\n  \"priceProviderName\": \"Momondo\",\r\n  \"currency\": \"EUR\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all prices copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 2 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get price by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/prices/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete price 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/prices/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get price 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/prices/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"priceId\": 1,\r\n  \"classType\": \"First Class\",\r\n  \"price\": 3000,\r\n  \"priceProviderName\": \"Emirates\",\r\n  \"currency\": \"EUR\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/prices/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var expectedUserData = {\r",
									"    priceId: 1,\r",
									"    \"classType\": \"First Class\",\r",
									"    \"price\": 3000,\r",
									"    \"priceProviderName\": \"Emirates\",\r",
									"     \"currency\": \"EUR\"\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches the expected user data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedUserData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/prices/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another price copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classType\": \"Business\",\r\n  \"price\": 2100,\r\n  \"priceProviderName\": \"Travelink\",\r\n  \"currency\": \"NOK\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/prices/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all prices final",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Flight",
			"item": [
				{
					"name": "Add airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"SAS\",\n    \"code\": \"SK\",\n    \"country\": \"Norway\",\n    \"logoUrl\": \"https://www.sas.no/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Norwegian\",\n    \"code\": \"DY\",\n    \"country\": \"Norway\",\n    \"logoUrl\": \"https://www.norwegian.no/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add aiport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vigra\",\n    \"code\": \"AES\",\n    \"city\": \"Ålesund\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Gardermoen\",\n    \"code\": \"OSL\",\n    \"city\": \"Oslo\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airport Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Krakow Balice\",\n    \"code\": \"KRK\",\n    \"city\": \"Krakow\",\n    \"country\": \"Poland\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all flights initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"flightNumber\": \"AA12SADA3\",\r\n  \"departureTime\": \"2025-06-15T14:30:00\",\r\n  \"arrivalTime\": \"2025-06-15T18:45:00\",\r\n  \"roundTrip\": true,\r\n  \"status\": \"SCHEDULED\",\r\n  \"extraFeatures\": \"WiFi, USB charging, In-flight Entertainment\",\r\n  \"availableClasses\": \"Business, Economy\",\r\n  \"airline\": {\r\n    \"airlineId\": 1\r\n  },\r\n  \"departureAirport\": {\r\n    \"airportId\": 1\r\n  },\r\n  \"arrivalAirport\": {\r\n    \"airportId\": 2\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"flightNumber\": \"AA12SADA3sadasda\",\r\n  \"departureTime\": \"2025-06-15T14:30:00\",\r\n  \"arrivalTime\": \"2025-06-15T18:45:00\",\r\n  \"roundTrip\": true,\r\n  \"extraFeatures\": \"WiFi, In-flight Entertainment\",\r\n  \"availableClasses\": \"Business, First Class\",\r\n  \"status\": \"SCHEDULED\",\r\n  \"airline\": {\r\n    \"airlineId\": 2\r\n  },\r\n  \"departureAirport\": {\r\n    \"airportId\": 1\r\n  },\r\n  \"arrivalAirport\": {\r\n    \"airportId\": 2\r\n  },\r\n  \"price\": {\r\n    \"priceId\" : 2\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classType\": \"Economy\",\r\n  \"price\": 250.50,\r\n  \"priceProviderName\": \"Airline XYZ\",\r\n  \"currency\": \"USD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classType\": \"Economy\",\r\n  \"price\": 250.50,\r\n  \"priceProviderName\": \"Airline XYZ\",\r\n  \"currency\": \"USD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add price to flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n {\r\n    \"priceId\": 1\r\n }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights/1/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"1",
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add price to another flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n {\r\n    \"priceId\": 2\r\n }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights/2/prices",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"2",
								"prices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all flights copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 2 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get flight by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete flight 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get flight 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"flightId\": 1,\r\n  \"flightNumber\": \"AA12SADA3\",\r\n  \"departureTime\": \"2025-06-15T14:30:00\",\r\n  \"arrivalTime\": \"2025-06-15T18:45:00\",\r\n  \"roundTrip\": true,\r\n  \"extraFeatures\": \"WiFi, USB charging, In-flight Entertainment\",\r\n  \"availableClasses\": \"Business, Economy\",\r\n  \"status\": \"SCHEDULED\",\r\n  \"airline\": {\r\n    \"airlineId\": 1\r\n  },\r\n  \"departureAirport\": {\r\n    \"airportId\": 1\r\n  },\r\n  \"arrivalAirport\": {\r\n    \"airportId\": 3\r\n  },\r\n    \"prices\": [\r\n        {\r\n            \"priceId\": 1\r\n        }\r\n    ]\r\n}\r\n\r\n\r\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var expectedFlightData = {\r",
									"    \"flightId\": 1,\r",
									"    \"airline\": {\r",
									"        \"airlineId\": 1,\r",
									"        \"name\": \"SAS\",\r",
									"        \"code\": \"SK\",\r",
									"        \"country\": \"Norway\",\r",
									"        \"logoFileName\": null\r",
									"    },\r",
									"    \"flightNumber\": \"AA12SADA3\",\r",
									"    \"departureAirport\": {\r",
									"        \"airportId\": 1,\r",
									"        \"name\": \"Vigra\",\r",
									"        \"code\": \"AES\",\r",
									"        \"city\": \"Ålesund\",\r",
									"        \"country\": \"Norway\"\r",
									"    },\r",
									"    \"arrivalAirport\": {\r",
									"        \"airportId\": 3,\r",
									"        \"name\": \"Krakow Balice\",\r",
									"        \"code\": \"KRK\",\r",
									"        \"city\": \"Krakow\",\r",
									"        \"country\": \"Poland\"\r",
									"    },\r",
									"    \"departureTime\": \"2025-06-15T14:30:00\",\r",
									"    \"arrivalTime\": \"2025-06-15T18:45:00\",\r",
									"    \"roundTrip\": true,\r",
									"    \"extraFeatures\": \"WiFi, USB charging, In-flight Entertainment\",\r",
									"    \"availableClasses\": \"Business, Economy\",\r",
									"    \"status\": \"SCHEDULED\",\r",
									"    \"prices\": [\r",
									"        {\r",
									"            \"priceId\": 1,\r",
									"            \"classType\": \"Economy\",\r",
									"            \"price\": 250.5,\r",
									"            \"priceProviderName\": \"Airline XYZ\",\r",
									"            \"currency\": \"USD\"\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another flight copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"flightNumber\": \"Dasd213\",\r\n  \"departureTime\": \"2025-06-15T20:30:00\",\r\n  \"arrivalTime\": \"2025-06-15T22:45:00\",\r\n  \"roundTrip\": true,\r\n  \"status\": \"SCHEDULED\",\r\n  \"airline\": {\r\n    \"airlineId\": 2\r\n  },\r\n  \"departureAirport\": {\r\n    \"airportId\": 1\r\n  },\r\n  \"arrivalAirport\": {\r\n    \"airportId\": 2\r\n  },\r\n  \"price\": {\r\n    \"priceId\" : 2\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all flights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all flights final",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get roundtrip flights",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/roundtrip",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"roundtrip"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one way flights",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/oneway",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"oneway"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all airlines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airlines/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/airports/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Flight",
			"item": [
				{
					"name": "Search OSL-AES round trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has outbound and return flight with flightId\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.forEach(flightDTO => {\r",
									"        pm.expect(flightDTO).to.have.property('outboundFlight');\r",
									"        pm.expect(flightDTO.outboundFlight).to.have.property('flightId');\r",
									"\r",
									"        if (flightDTO.returnFlight) {\r",
									"            pm.expect(flightDTO.returnFlight).to.have.property('flightId');\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"outboundFlight\": {\r",
									"            \"flightId\": 2,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 2,\r",
									"                \"name\": \"Norwegian Air Shuttle\",\r",
									"                \"code\": \"DY\",\r",
									"                \"country\": \"Norway\",\r",
									"                \"logoFileName\": \"norwegian\"\r",
									"            },\r",
									"            \"flightNumber\": \"DY708\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 3,\r",
									"                \"name\": \"Oslo Gardermoen Airport\",\r",
									"                \"code\": \"OSL\",\r",
									"                \"city\": \"Oslo\",\r",
									"                \"country\": \"Norway\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 4,\r",
									"                \"name\": \"Ålesund Airport\",\r",
									"                \"code\": \"AES\",\r",
									"                \"city\": \"Ålesund\",\r",
									"                \"country\": \"Norway\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-09-05T09:00:00\",\r",
									"            \"arrivalTime\": \"2025-09-05T10:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Free Breakfast, Seat Reservation, Fast Track\",\r",
									"            \"availableClasses\": \"Economy Flex\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 4,\r",
									"                    \"classType\": \"Economy Flex\",\r",
									"                    \"price\": 1400.0,\r",
									"                    \"priceProviderName\": \"Kayak\",\r",
									"                    \"currency\": \"NOK\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 3,\r",
									"                    \"classType\": \"Economy Flex\",\r",
									"                    \"price\": 1200.0,\r",
									"                    \"priceProviderName\": \"Momondo\",\r",
									"                    \"currency\": \"NOK\"\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"returnFlight\": {\r",
									"            \"flightId\": 3,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 2,\r",
									"                \"name\": \"Norwegian Air Shuttle\",\r",
									"                \"code\": \"DY\",\r",
									"                \"country\": \"Norway\",\r",
									"                \"logoFileName\": \"norwegian\"\r",
									"            },\r",
									"            \"flightNumber\": \"DY709\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 4,\r",
									"                \"name\": \"Ålesund Airport\",\r",
									"                \"code\": \"AES\",\r",
									"                \"city\": \"Ålesund\",\r",
									"                \"country\": \"Norway\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 3,\r",
									"                \"name\": \"Oslo Gardermoen Airport\",\r",
									"                \"code\": \"OSL\",\r",
									"                \"city\": \"Oslo\",\r",
									"                \"country\": \"Norway\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-09-12T11:00:00\",\r",
									"            \"arrivalTime\": \"2025-09-12T12:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Free Breakfast, Seat Reservation, Fast Track\",\r",
									"            \"availableClasses\": \"Economy Flex\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 4,\r",
									"                    \"classType\": \"Economy Flex\",\r",
									"                    \"price\": 1400.0,\r",
									"                    \"priceProviderName\": \"Kayak\",\r",
									"                    \"currency\": \"NOK\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 3,\r",
									"                    \"classType\": \"Economy Flex\",\r",
									"                    \"price\": 1200.0,\r",
									"                    \"priceProviderName\": \"Momondo\",\r",
									"                    \"currency\": \"NOK\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"];\r",
									"\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=OSL&to=AES&start=2025-09-05T00:00:00&end=2025-09-12T00:00:00&roundTrip=true",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "OSL"
								},
								{
									"key": "to",
									"value": "AES"
								},
								{
									"key": "start",
									"value": "2025-09-05T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-09-12T00:00:00"
								},
								{
									"key": "roundTrip",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search JFK-LAX one way",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"flightId\": 1,\r",
									"        \"airline\": {\r",
									"            \"airlineId\": 1,\r",
									"            \"name\": \"Delta Airlines\",\r",
									"            \"code\": \"DL\",\r",
									"            \"country\": \"United States\",\r",
									"            \"logoFileName\": \"delta\"\r",
									"        },\r",
									"        \"flightNumber\": \"DL425\",\r",
									"        \"departureAirport\": {\r",
									"            \"airportId\": 1,\r",
									"            \"name\": \"John F. Kennedy International Airport\",\r",
									"            \"code\": \"JFK\",\r",
									"            \"city\": \"New York\",\r",
									"            \"country\": \"United States\"\r",
									"        },\r",
									"        \"arrivalAirport\": {\r",
									"            \"airportId\": 2,\r",
									"            \"name\": \"Los Angeles International Airport\",\r",
									"            \"code\": \"LAX\",\r",
									"            \"city\": \"Los Angeles\",\r",
									"            \"country\": \"United States\"\r",
									"        },\r",
									"        \"departureTime\": \"2025-08-15T08:00:00\",\r",
									"        \"arrivalTime\": \"2025-08-15T11:30:00\",\r",
									"        \"roundTrip\": false,\r",
									"        \"extraFeatures\": \"Complimentary Wi-Fi, Seat-back Screens, Free Snacks\",\r",
									"        \"availableClasses\": \"Economy\",\r",
									"        \"status\": \"SCHEDULED\",\r",
									"        \"prices\": [\r",
									"            {\r",
									"                \"priceId\": 1,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 150.0,\r",
									"                \"priceProviderName\": \"SkyScanner\",\r",
									"                \"currency\": \"USD\"\r",
									"            },\r",
									"            {\r",
									"                \"priceId\": 2,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 175.0,\r",
									"                \"priceProviderName\": \"Expedia\",\r",
									"                \"currency\": \"USD\"\r",
									"            }\r",
									"        ]\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=JFK&to=LAX&start=2025-08-15T00:00:00&roundTrip=false",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "JFK"
								},
								{
									"key": "to",
									"value": "LAX"
								},
								{
									"key": "start",
									"value": "2025-08-15T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-09-23T00:00:00",
									"disabled": true
								},
								{
									"key": "roundTrip",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search AMS-LHR one way",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"flightId\": 4,\r",
									"        \"airline\": {\r",
									"            \"airlineId\": 3,\r",
									"            \"name\": \"KLM Royal Dutch Airlines\",\r",
									"            \"code\": \"KL\",\r",
									"            \"country\": \"Netherlands\",\r",
									"            \"logoFileName\": \"klm\"\r",
									"        },\r",
									"        \"flightNumber\": \"KL605\",\r",
									"        \"departureAirport\": {\r",
									"            \"airportId\": 5,\r",
									"            \"name\": \"Amsterdam Schiphol Airport\",\r",
									"            \"code\": \"AMS\",\r",
									"            \"city\": \"Amsterdam\",\r",
									"            \"country\": \"Netherlands\"\r",
									"        },\r",
									"        \"arrivalAirport\": {\r",
									"            \"airportId\": 6,\r",
									"            \"name\": \"London Heathrow Airport\",\r",
									"            \"code\": \"LHR\",\r",
									"            \"city\": \"London\",\r",
									"            \"country\": \"United Kingdom\"\r",
									"        },\r",
									"        \"departureTime\": \"2025-07-21T07:00:00\",\r",
									"        \"arrivalTime\": \"2025-07-21T08:00:00\",\r",
									"        \"roundTrip\": false,\r",
									"        \"extraFeatures\": \"In-flight Magazine, Complimentary Meals, Extra Legroom\",\r",
									"        \"availableClasses\": \"Economy, Business\",\r",
									"        \"status\": \"SCHEDULED\",\r",
									"        \"prices\": [\r",
									"            {\r",
									"                \"priceId\": 5,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 90.0,\r",
									"                \"priceProviderName\": \"Orbitz\",\r",
									"                \"currency\": \"EUR\"\r",
									"            },\r",
									"            {\r",
									"                \"priceId\": 6,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 110.0,\r",
									"                \"priceProviderName\": \"CheapOair\",\r",
									"                \"currency\": \"EUR\"\r",
									"            }\r",
									"        ]\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?start=2025-07-21T00:00:00&roundTrip=false&from=AMS&to=LHR",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "start",
									"value": "2025-07-21T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-09-23T00:00:00",
									"disabled": true
								},
								{
									"key": "roundTrip",
									"value": "false"
								},
								{
									"key": "from",
									"value": "AMS"
								},
								{
									"key": "to",
									"value": "LHR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search LHR-JFK round trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has outbound and return flight with flightId\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.forEach(flightDTO => {\r",
									"        pm.expect(flightDTO).to.have.property('outboundFlight');\r",
									"        pm.expect(flightDTO.outboundFlight).to.have.property('flightId');\r",
									"\r",
									"        if (flightDTO.returnFlight) {\r",
									"            pm.expect(flightDTO.returnFlight).to.have.property('flightId');\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"outboundFlight\": {\r",
									"            \"flightId\": 5,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 4,\r",
									"                \"name\": \"British Airways\",\r",
									"                \"code\": \"BA\",\r",
									"                \"country\": \"United Kingdom\",\r",
									"                \"logoFileName\": \"british_airways\"\r",
									"            },\r",
									"            \"flightNumber\": \"BA116\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 6,\r",
									"                \"name\": \"London Heathrow Airport\",\r",
									"                \"code\": \"LHR\",\r",
									"                \"city\": \"London\",\r",
									"                \"country\": \"United Kingdom\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 1,\r",
									"                \"name\": \"John F. Kennedy International Airport\",\r",
									"                \"code\": \"JFK\",\r",
									"                \"city\": \"New York\",\r",
									"                \"country\": \"United States\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-10-10T10:00:00\",\r",
									"            \"arrivalTime\": \"2025-10-10T13:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Lounge Access, Priority Boarding, Enhanced Entertainment System\",\r",
									"            \"availableClasses\": \"Premium Economy, Business\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 8,\r",
									"                    \"classType\": \"Premium Economy\",\r",
									"                    \"price\": 400.0,\r",
									"                    \"priceProviderName\": \"Travelocity\",\r",
									"                    \"currency\": \"GBP\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 7,\r",
									"                    \"classType\": \"Premium Economy\",\r",
									"                    \"price\": 350.0,\r",
									"                    \"priceProviderName\": \"OneTravel\",\r",
									"                    \"currency\": \"GBP\"\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"returnFlight\": {\r",
									"            \"flightId\": 6,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 4,\r",
									"                \"name\": \"British Airways\",\r",
									"                \"code\": \"BA\",\r",
									"                \"country\": \"United Kingdom\",\r",
									"                \"logoFileName\": \"british_airways\"\r",
									"            },\r",
									"            \"flightNumber\": \"BA117\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 1,\r",
									"                \"name\": \"John F. Kennedy International Airport\",\r",
									"                \"code\": \"JFK\",\r",
									"                \"city\": \"New York\",\r",
									"                \"country\": \"United States\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 6,\r",
									"                \"name\": \"London Heathrow Airport\",\r",
									"                \"code\": \"LHR\",\r",
									"                \"city\": \"London\",\r",
									"                \"country\": \"United Kingdom\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-10-17T15:00:00\",\r",
									"            \"arrivalTime\": \"2025-10-17T18:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Lounge Access, Priority Boarding, Enhanced Entertainment System\",\r",
									"            \"availableClasses\": \"Premium Economy, Business\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 7,\r",
									"                    \"classType\": \"Premium Economy\",\r",
									"                    \"price\": 350.0,\r",
									"                    \"priceProviderName\": \"OneTravel\",\r",
									"                    \"currency\": \"GBP\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 8,\r",
									"                    \"classType\": \"Premium Economy\",\r",
									"                    \"price\": 400.0,\r",
									"                    \"priceProviderName\": \"Travelocity\",\r",
									"                    \"currency\": \"GBP\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"];\r",
									"\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=LHR&to=JFK&start=2025-10-10T00:00:00&end=2025-10-17T00:00:00&roundTrip=true",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "LHR"
								},
								{
									"key": "to",
									"value": "JFK"
								},
								{
									"key": "start",
									"value": "2025-10-10T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-10-17T00:00:00"
								},
								{
									"key": "roundTrip",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search ZRH-AMS one way",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"flightId\": 7,\r",
									"        \"airline\": {\r",
									"            \"airlineId\": 5,\r",
									"            \"name\": \"Swiss International Air Lines\",\r",
									"            \"code\": \"LX\",\r",
									"            \"country\": \"Switzerland\",\r",
									"            \"logoFileName\": \"swiss\"\r",
									"        },\r",
									"        \"flightNumber\": \"LX110\",\r",
									"        \"departureAirport\": {\r",
									"            \"airportId\": 7,\r",
									"            \"name\": \"Zurich Airport\",\r",
									"            \"code\": \"ZRH\",\r",
									"            \"city\": \"Zurich\",\r",
									"            \"country\": \"Switzerland\"\r",
									"        },\r",
									"        \"arrivalAirport\": {\r",
									"            \"airportId\": 5,\r",
									"            \"name\": \"Amsterdam Schiphol Airport\",\r",
									"            \"code\": \"AMS\",\r",
									"            \"city\": \"Amsterdam\",\r",
									"            \"country\": \"Netherlands\"\r",
									"        },\r",
									"        \"departureTime\": \"2025-08-01T06:00:00\",\r",
									"        \"arrivalTime\": \"2025-08-01T07:30:00\",\r",
									"        \"roundTrip\": false,\r",
									"        \"extraFeatures\": \"Swiss Chocolates, Complimentary Drinks, Priority Check-in\",\r",
									"        \"availableClasses\": \"Economy, Business\",\r",
									"        \"status\": \"SCHEDULED\",\r",
									"        \"prices\": [\r",
									"            {\r",
									"                \"priceId\": 9,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 120.0,\r",
									"                \"priceProviderName\": \"Google Flights\",\r",
									"                \"currency\": \"EUR\"\r",
									"            },\r",
									"            {\r",
									"                \"priceId\": 10,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 140.0,\r",
									"                \"priceProviderName\": \"JustFly\",\r",
									"                \"currency\": \"EUR\"\r",
									"            }\r",
									"        ]\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=ZRH&to=AMS&start=2025-08-01T00:00:00&roundTrip=false",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "ZRH"
								},
								{
									"key": "to",
									"value": "AMS"
								},
								{
									"key": "start",
									"value": "2025-08-01T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-09-23T00:00:00",
									"disabled": true
								},
								{
									"key": "roundTrip",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search FCO-CDG round trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has outbound and return flight with flightId\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.forEach(flightDTO => {\r",
									"        pm.expect(flightDTO).to.have.property('outboundFlight');\r",
									"        pm.expect(flightDTO.outboundFlight).to.have.property('flightId');\r",
									"\r",
									"        if (flightDTO.returnFlight) {\r",
									"            pm.expect(flightDTO.returnFlight).to.have.property('flightId');\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"outboundFlight\": {\r",
									"            \"flightId\": 8,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 6,\r",
									"                \"name\": \"ITA Airways\",\r",
									"                \"code\": \"AZ\",\r",
									"                \"country\": \"Italy\",\r",
									"                \"logoFileName\": \"ita_airways\"\r",
									"            },\r",
									"            \"flightNumber\": \"AZ560\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 8,\r",
									"                \"name\": \"Leonardo da Vinci-Fiumicino Airport\",\r",
									"                \"code\": \"FCO\",\r",
									"                \"city\": \"Rome\",\r",
									"                \"country\": \"Italy\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 9,\r",
									"                \"name\": \"Charles de Gaulle Airport\",\r",
									"                \"code\": \"CDG\",\r",
									"                \"city\": \"Paris\",\r",
									"                \"country\": \"France\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-11-15T09:00:00\",\r",
									"            \"arrivalTime\": \"2025-11-15T11:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Italian Cuisine, Reserved Overhead Space, ITA Airways Lounges\",\r",
									"            \"availableClasses\": \"Economy, Business\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 12,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 100.0,\r",
									"                    \"priceProviderName\": \"Priceline\",\r",
									"                    \"currency\": \"EUR\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 11,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 80.0,\r",
									"                    \"priceProviderName\": \"eDreams\",\r",
									"                    \"currency\": \"EUR\"\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"returnFlight\": {\r",
									"            \"flightId\": 9,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 6,\r",
									"                \"name\": \"ITA Airways\",\r",
									"                \"code\": \"AZ\",\r",
									"                \"country\": \"Italy\",\r",
									"                \"logoFileName\": \"ita_airways\"\r",
									"            },\r",
									"            \"flightNumber\": \"AZ561\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 9,\r",
									"                \"name\": \"Charles de Gaulle Airport\",\r",
									"                \"code\": \"CDG\",\r",
									"                \"city\": \"Paris\",\r",
									"                \"country\": \"France\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 8,\r",
									"                \"name\": \"Leonardo da Vinci-Fiumicino Airport\",\r",
									"                \"code\": \"FCO\",\r",
									"                \"city\": \"Rome\",\r",
									"                \"country\": \"Italy\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-11-22T12:00:00\",\r",
									"            \"arrivalTime\": \"2025-11-22T14:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Italian Cuisine, Reserved Overhead Space, ITA Airways Lounges\",\r",
									"            \"availableClasses\": \"Economy, Business\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 12,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 100.0,\r",
									"                    \"priceProviderName\": \"Priceline\",\r",
									"                    \"currency\": \"EUR\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 11,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 80.0,\r",
									"                    \"priceProviderName\": \"eDreams\",\r",
									"                    \"currency\": \"EUR\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=FCO&to=CDG&start=2025-11-15T00:00:00&end=2025-11-22T00:00:00&roundTrip=true",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "FCO"
								},
								{
									"key": "to",
									"value": "CDG"
								},
								{
									"key": "start",
									"value": "2025-11-15T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-11-22T00:00:00"
								},
								{
									"key": "roundTrip",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search DFW-ORD round trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has outbound and return flight with flightId\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.forEach(flightDTO => {\r",
									"        pm.expect(flightDTO).to.have.property('outboundFlight');\r",
									"        pm.expect(flightDTO.outboundFlight).to.have.property('flightId');\r",
									"\r",
									"        if (flightDTO.returnFlight) {\r",
									"            pm.expect(flightDTO.returnFlight).to.have.property('flightId');\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"outboundFlight\": {\r",
									"            \"flightId\": 10,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 7,\r",
									"                \"name\": \"American Airlines\",\r",
									"                \"code\": \"AA\",\r",
									"                \"country\": \"United States\",\r",
									"                \"logoFileName\": \"american_airlines\"\r",
									"            },\r",
									"            \"flightNumber\": \"AA220\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 10,\r",
									"                \"name\": \"Dallas/Fort Worth International Airport\",\r",
									"                \"code\": \"DFW\",\r",
									"                \"city\": \"Dallas\",\r",
									"                \"country\": \"United States\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 11,\r",
									"                \"name\": \"O'Hare International Airport\",\r",
									"                \"code\": \"ORD\",\r",
									"                \"city\": \"Chicago\",\r",
									"                \"country\": \"United States\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-06-15T07:00:00\",\r",
									"            \"arrivalTime\": \"2025-06-15T09:30:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Wi-Fi, Extra legroom, Complimentary Snacks\",\r",
									"            \"availableClasses\": \"Main Cabin, Main Cabin Extra\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 13,\r",
									"                    \"classType\": \"Main Cabin\",\r",
									"                    \"price\": 300.0,\r",
									"                    \"priceProviderName\": \"American Airlines Website\",\r",
									"                    \"currency\": \"USD\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 14,\r",
									"                    \"classType\": \"Main Cabin\",\r",
									"                    \"price\": 320.0,\r",
									"                    \"priceProviderName\": \"Orbitz\",\r",
									"                    \"currency\": \"USD\"\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"returnFlight\": {\r",
									"            \"flightId\": 11,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 7,\r",
									"                \"name\": \"American Airlines\",\r",
									"                \"code\": \"AA\",\r",
									"                \"country\": \"United States\",\r",
									"                \"logoFileName\": \"american_airlines\"\r",
									"            },\r",
									"            \"flightNumber\": \"AA221\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 11,\r",
									"                \"name\": \"O'Hare International Airport\",\r",
									"                \"code\": \"ORD\",\r",
									"                \"city\": \"Chicago\",\r",
									"                \"country\": \"United States\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 10,\r",
									"                \"name\": \"Dallas/Fort Worth International Airport\",\r",
									"                \"code\": \"DFW\",\r",
									"                \"city\": \"Dallas\",\r",
									"                \"country\": \"United States\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-06-20T10:30:00\",\r",
									"            \"arrivalTime\": \"2025-06-20T13:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Wi-Fi, Extra legroom, Complimentary Snacks\",\r",
									"            \"availableClasses\": \"Main Cabin, Main Cabin Extra\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 13,\r",
									"                    \"classType\": \"Main Cabin\",\r",
									"                    \"price\": 300.0,\r",
									"                    \"priceProviderName\": \"American Airlines Website\",\r",
									"                    \"currency\": \"USD\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 14,\r",
									"                    \"classType\": \"Main Cabin\",\r",
									"                    \"price\": 320.0,\r",
									"                    \"priceProviderName\": \"Orbitz\",\r",
									"                    \"currency\": \"USD\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=DFW&to=ORD&start=2025-06-15T00:00:00&end=2025-06-20T00:00:00&roundTrip=true",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "DFW"
								},
								{
									"key": "to",
									"value": "ORD"
								},
								{
									"key": "start",
									"value": "2025-06-15T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-06-20T00:00:00"
								},
								{
									"key": "roundTrip",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search FRA-JFK one way",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"flightId\": 12,\r",
									"        \"airline\": {\r",
									"            \"airlineId\": 8,\r",
									"            \"name\": \"Lufthansa\",\r",
									"            \"code\": \"LH\",\r",
									"            \"country\": \"Germany\",\r",
									"            \"logoFileName\": \"lufthansa\"\r",
									"        },\r",
									"        \"flightNumber\": \"LH445\",\r",
									"        \"departureAirport\": {\r",
									"            \"airportId\": 12,\r",
									"            \"name\": \"Frankfurt Airport\",\r",
									"            \"code\": \"FRA\",\r",
									"            \"city\": \"Frankfurt\",\r",
									"            \"country\": \"Germany\"\r",
									"        },\r",
									"        \"arrivalAirport\": {\r",
									"            \"airportId\": 1,\r",
									"            \"name\": \"John F. Kennedy International Airport\",\r",
									"            \"code\": \"JFK\",\r",
									"            \"city\": \"New York\",\r",
									"            \"country\": \"United States\"\r",
									"        },\r",
									"        \"departureTime\": \"2025-07-01T08:45:00\",\r",
									"        \"arrivalTime\": \"2025-07-01T15:00:00\",\r",
									"        \"roundTrip\": false,\r",
									"        \"extraFeatures\": \"On-demand Video, Gourmet Meals, Lounge Access\",\r",
									"        \"availableClasses\": \"Economy, Premium Economy, Business\",\r",
									"        \"status\": \"SCHEDULED\",\r",
									"        \"prices\": [\r",
									"            {\r",
									"                \"priceId\": 16,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 470.0,\r",
									"                \"priceProviderName\": \"Kayak\",\r",
									"                \"currency\": \"EUR\"\r",
									"            },\r",
									"            {\r",
									"                \"priceId\": 15,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 450.0,\r",
									"                \"priceProviderName\": \"Lufthansa Website\",\r",
									"                \"currency\": \"EUR\"\r",
									"            }\r",
									"        ]\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=FRA&to=JFK&start=2025-07-01T00:00:00&roundTrip=false",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "FRA"
								},
								{
									"key": "to",
									"value": "JFK"
								},
								{
									"key": "start",
									"value": "2025-07-01T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-09-23T00:00:00",
									"disabled": true
								},
								{
									"key": "roundTrip",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search CDG-HND round trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has outbound and return flight with flightId\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.forEach(flightDTO => {\r",
									"        pm.expect(flightDTO).to.have.property('outboundFlight');\r",
									"        pm.expect(flightDTO.outboundFlight).to.have.property('flightId');\r",
									"\r",
									"        if (flightDTO.returnFlight) {\r",
									"            pm.expect(flightDTO.returnFlight).to.have.property('flightId');\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"var expectedFlightData = [ \r",
									"    {\r",
									"        \"outboundFlight\": {\r",
									"            \"flightId\": 13,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 9,\r",
									"                \"name\": \"Air France\",\r",
									"                \"code\": \"AF\",\r",
									"                \"country\": \"France\",\r",
									"                \"logoFileName\": \"air_france\"\r",
									"            },\r",
									"            \"flightNumber\": \"AF123\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 9,\r",
									"                \"name\": \"Charles de Gaulle Airport\",\r",
									"                \"code\": \"CDG\",\r",
									"                \"city\": \"Paris\",\r",
									"                \"country\": \"France\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 13,\r",
									"                \"name\": \"Haneda Airport\",\r",
									"                \"code\": \"HND\",\r",
									"                \"city\": \"Tokyo\",\r",
									"                \"country\": \"Japan\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-05-10T10:00:00\",\r",
									"            \"arrivalTime\": \"2025-05-10T23:30:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Michelin-starred Menus, Flat-bed Seats, Personal Coat Service\",\r",
									"            \"availableClasses\": \"Economy, Premium Economy, La Première\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 17,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 800.0,\r",
									"                    \"priceProviderName\": \"Air France Website\",\r",
									"                    \"currency\": \"EUR\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 18,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 820.0,\r",
									"                    \"priceProviderName\": \"Expedia\",\r",
									"                    \"currency\": \"EUR\"\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"returnFlight\": {\r",
									"            \"flightId\": 14,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 9,\r",
									"                \"name\": \"Air France\",\r",
									"                \"code\": \"AF\",\r",
									"                \"country\": \"France\",\r",
									"                \"logoFileName\": \"air_france\"\r",
									"            },\r",
									"            \"flightNumber\": \"AF124\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 13,\r",
									"                \"name\": \"Haneda Airport\",\r",
									"                \"code\": \"HND\",\r",
									"                \"city\": \"Tokyo\",\r",
									"                \"country\": \"Japan\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 9,\r",
									"                \"name\": \"Charles de Gaulle Airport\",\r",
									"                \"code\": \"CDG\",\r",
									"                \"city\": \"Paris\",\r",
									"                \"country\": \"France\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-05-24T14:00:00\",\r",
									"            \"arrivalTime\": \"2025-05-24T19:30:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Michelin-starred Menus, Flat-bed Seats, Personal Coat Service\",\r",
									"            \"availableClasses\": \"Economy, Premium Economy, La Première\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 18,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 820.0,\r",
									"                    \"priceProviderName\": \"Expedia\",\r",
									"                    \"currency\": \"EUR\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 17,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 800.0,\r",
									"                    \"priceProviderName\": \"Air France Website\",\r",
									"                    \"currency\": \"EUR\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=CDG&to=HND&start=2025-05-10T00:00:00&end=2025-05-24T00:00:00&roundTrip=true",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "CDG"
								},
								{
									"key": "to",
									"value": "HND"
								},
								{
									"key": "start",
									"value": "2025-05-10T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-05-24T00:00:00"
								},
								{
									"key": "roundTrip",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search DXB-LHR one way",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"flightId\": 15,\r",
									"        \"airline\": {\r",
									"            \"airlineId\": 10,\r",
									"            \"name\": \"Emirates\",\r",
									"            \"code\": \"EK\",\r",
									"            \"country\": \"United Arab Emirates\",\r",
									"            \"logoFileName\": \"emirates\"\r",
									"        },\r",
									"        \"flightNumber\": \"EK204\",\r",
									"        \"departureAirport\": {\r",
									"            \"airportId\": 14,\r",
									"            \"name\": \"Dubai International Airport\",\r",
									"            \"code\": \"DXB\",\r",
									"            \"city\": \"Dubai\",\r",
									"            \"country\": \"United Arab Emirates\"\r",
									"        },\r",
									"        \"arrivalAirport\": {\r",
									"            \"airportId\": 6,\r",
									"            \"name\": \"London Heathrow Airport\",\r",
									"            \"code\": \"LHR\",\r",
									"            \"city\": \"London\",\r",
									"            \"country\": \"United Kingdom\"\r",
									"        },\r",
									"        \"departureTime\": \"2025-08-15T08:00:00\",\r",
									"        \"arrivalTime\": \"2025-08-15T12:00:00\",\r",
									"        \"roundTrip\": false,\r",
									"        \"extraFeatures\": \"Shower Spas, Onboard Lounge, Private Suites\",\r",
									"        \"availableClasses\": \"Economy, Business, First Class\",\r",
									"        \"status\": \"SCHEDULED\",\r",
									"        \"prices\": [\r",
									"            {\r",
									"                \"priceId\": 19,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 1000.0,\r",
									"                \"priceProviderName\": \"Emirates Website\",\r",
									"                \"currency\": \"USD\"\r",
									"            },\r",
									"            {\r",
									"                \"priceId\": 20,\r",
									"                \"classType\": \"Economy\",\r",
									"                \"price\": 1025.0,\r",
									"                \"priceProviderName\": \"SkyScanner\",\r",
									"                \"currency\": \"USD\"\r",
									"            }\r",
									"        ]\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?roundTrip=false&from=DXB&to=LHR&start=2025-08-15T00:00:00",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "end",
									"value": "2025-09-23T00:00:00",
									"disabled": true
								},
								{
									"key": "roundTrip",
									"value": "false"
								},
								{
									"key": "from",
									"value": "DXB"
								},
								{
									"key": "to",
									"value": "LHR"
								},
								{
									"key": "start",
									"value": "2025-08-15T00:00:00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search DOH-SYD round trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has outbound and return flight with flightId\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.forEach(flightDTO => {\r",
									"        pm.expect(flightDTO).to.have.property('outboundFlight');\r",
									"        pm.expect(flightDTO.outboundFlight).to.have.property('flightId');\r",
									"\r",
									"        if (flightDTO.returnFlight) {\r",
									"            pm.expect(flightDTO.returnFlight).to.have.property('flightId');\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"outboundFlight\": {\r",
									"            \"flightId\": 16,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 11,\r",
									"                \"name\": \"Qatar Airways\",\r",
									"                \"code\": \"QR\",\r",
									"                \"country\": \"Qatar\",\r",
									"                \"logoFileName\": \"qatar_airways\"\r",
									"            },\r",
									"            \"flightNumber\": \"QR905\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 15,\r",
									"                \"name\": \"Hamad International Airport\",\r",
									"                \"code\": \"DOH\",\r",
									"                \"city\": \"Doha\",\r",
									"                \"country\": \"Qatar\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 16,\r",
									"                \"name\": \"Sydney Kingsford Smith Airport\",\r",
									"                \"code\": \"SYD\",\r",
									"                \"city\": \"Sydney\",\r",
									"                \"country\": \"Australia\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-09-01T02:00:00\",\r",
									"            \"arrivalTime\": \"2025-09-01T20:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Award-winning Cuisine, 4000 Entertainment Options, Fully Lie-flat Beds\",\r",
									"            \"availableClasses\": \"Economy, Business Class, Qsuite\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 21,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 1500.0,\r",
									"                    \"priceProviderName\": \"Qatar Airways Website\",\r",
									"                    \"currency\": \"USD\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 22,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 1520.0,\r",
									"                    \"priceProviderName\": \"CheapOair\",\r",
									"                    \"currency\": \"USD\"\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"returnFlight\": {\r",
									"            \"flightId\": 17,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 11,\r",
									"                \"name\": \"Qatar Airways\",\r",
									"                \"code\": \"QR\",\r",
									"                \"country\": \"Qatar\",\r",
									"                \"logoFileName\": \"qatar_airways\"\r",
									"            },\r",
									"            \"flightNumber\": \"QR906\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 16,\r",
									"                \"name\": \"Sydney Kingsford Smith Airport\",\r",
									"                \"code\": \"SYD\",\r",
									"                \"city\": \"Sydney\",\r",
									"                \"country\": \"Australia\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 15,\r",
									"                \"name\": \"Hamad International Airport\",\r",
									"                \"code\": \"DOH\",\r",
									"                \"city\": \"Doha\",\r",
									"                \"country\": \"Qatar\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-09-15T06:00:00\",\r",
									"            \"arrivalTime\": \"2025-09-15T14:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Award-winning Cuisine, 4000 Entertainment Options, Fully Lie-flat Beds\",\r",
									"            \"availableClasses\": \"Economy, Business Class, Qsuite\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 21,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 1500.0,\r",
									"                    \"priceProviderName\": \"Qatar Airways Website\",\r",
									"                    \"currency\": \"USD\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 22,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 1520.0,\r",
									"                    \"priceProviderName\": \"CheapOair\",\r",
									"                    \"currency\": \"USD\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=DOH&to=SYD&start=2025-09-01T00:00:00&end=2025-09-15T00:00:00&roundTrip=true",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "DOH"
								},
								{
									"key": "to",
									"value": "SYD"
								},
								{
									"key": "start",
									"value": "2025-09-01T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-09-15T00:00:00"
								},
								{
									"key": "roundTrip",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search SIN-JFK round trip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each result has outbound and return flight with flightId\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    response.forEach(flightDTO => {\r",
									"        pm.expect(flightDTO).to.have.property('outboundFlight');\r",
									"        pm.expect(flightDTO.outboundFlight).to.have.property('flightId');\r",
									"\r",
									"        if (flightDTO.returnFlight) {\r",
									"            pm.expect(flightDTO.returnFlight).to.have.property('flightId');\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"var expectedFlightData = [\r",
									"    {\r",
									"        \"outboundFlight\": {\r",
									"            \"flightId\": 18,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 12,\r",
									"                \"name\": \"Singapore Airlines\",\r",
									"                \"code\": \"SQ\",\r",
									"                \"country\": \"Singapore\",\r",
									"                \"logoFileName\": \"singapore_airlines\"\r",
									"            },\r",
									"            \"flightNumber\": \"SQ26\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 17,\r",
									"                \"name\": \"Singapore Changi Airport\",\r",
									"                \"code\": \"SIN\",\r",
									"                \"city\": \"Singapore\",\r",
									"                \"country\": \"Singapore\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 1,\r",
									"                \"name\": \"John F. Kennedy International Airport\",\r",
									"                \"code\": \"JFK\",\r",
									"                \"city\": \"New York\",\r",
									"                \"country\": \"United States\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-10-20T09:00:00\",\r",
									"            \"arrivalTime\": \"2025-10-20T21:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Book the Cook Service, Standalone Beds, Givenchy Amenities\",\r",
									"            \"availableClasses\": \"Economy, Premium Economy, Suites\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 23,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 2000.0,\r",
									"                    \"priceProviderName\": \"Singapore Airlines Website\",\r",
									"                    \"currency\": \"USD\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 24,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 2050.0,\r",
									"                    \"priceProviderName\": \"Google Flights\",\r",
									"                    \"currency\": \"SGD\"\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"returnFlight\": {\r",
									"            \"flightId\": 19,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 12,\r",
									"                \"name\": \"Singapore Airlines\",\r",
									"                \"code\": \"SQ\",\r",
									"                \"country\": \"Singapore\",\r",
									"                \"logoFileName\": \"singapore_airlines\"\r",
									"            },\r",
									"            \"flightNumber\": \"SQ27\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 1,\r",
									"                \"name\": \"John F. Kennedy International Airport\",\r",
									"                \"code\": \"JFK\",\r",
									"                \"city\": \"New York\",\r",
									"                \"country\": \"United States\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 17,\r",
									"                \"name\": \"Singapore Changi Airport\",\r",
									"                \"code\": \"SIN\",\r",
									"                \"city\": \"Singapore\",\r",
									"                \"country\": \"Singapore\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-10-30T11:00:00\",\r",
									"            \"arrivalTime\": \"2025-10-30T23:00:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": \"Book the Cook Service, Standalone Beds, Givenchy Amenities\",\r",
									"            \"availableClasses\": \"Economy, Premium Economy, Suites\",\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": [\r",
									"                {\r",
									"                    \"priceId\": 24,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 2050.0,\r",
									"                    \"priceProviderName\": \"Google Flights\",\r",
									"                    \"currency\": \"SGD\"\r",
									"                },\r",
									"                {\r",
									"                    \"priceId\": 23,\r",
									"                    \"classType\": \"Economy\",\r",
									"                    \"price\": 2000.0,\r",
									"                    \"priceProviderName\": \"Singapore Airlines Website\",\r",
									"                    \"currency\": \"USD\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.test(\"Response body matches the expected flight data\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.eql(expectedFlightData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/flights/search?from=SIN&to=JFK&start=2025-10-20T00:00:00&end=2025-10-30T00:00:00&roundTrip=true",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights",
								"search"
							],
							"query": [
								{
									"key": "from",
									"value": "SIN"
								},
								{
									"key": "to",
									"value": "JFK"
								},
								{
									"key": "start",
									"value": "2025-10-20T00:00:00"
								},
								{
									"key": "end",
									"value": "2025-10-30T00:00:00"
								},
								{
									"key": "roundTrip",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Add airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"SAS\",\n    \"code\": \"SK\",\n    \"country\": \"Norway\",\n    \"logoFileName\": \"sas\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Norwegian\",\n    \"code\": \"DY\",\n    \"country\": \"Norway\",\n    \"logoFileName\": \"norwegian\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airlines",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add aiport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vigra\",\n    \"code\": \"AES\",\n    \"city\": \"Ålesund\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Gardermoen\",\n    \"code\": \"OSL\",\n    \"city\": \"Oslo\",\n    \"country\": \"Norway\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/airports",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"flightNumber\": \"AA12SADA3\",\r\n  \"departureTime\": \"2025-06-15T14:30:00\",\r\n  \"arrivalTime\": \"2025-06-15T18:45:00\",\r\n  \"roundTrip\": true,\r\n  \"status\": \"SCHEDULED\",\r\n  \"extraFeatures\": \"WiFi, USB charging, In-flight Entertainment\",\r\n  \"airline\": {\r\n    \"airlineId\": 1\r\n  },\r\n  \"departureAirport\": {\r\n    \"airportId\": 1\r\n  },\r\n  \"arrivalAirport\": {\r\n    \"airportId\": 2\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"flightNumber\": \"AA12SADA3sadasda\",\r\n  \"departureTime\": \"2025-06-15T14:30:00\",\r\n  \"arrivalTime\": \"2025-06-15T18:45:00\",\r\n  \"roundTrip\": true,\r\n  \"extraFeatures\": \"WiFi, In-flight Entertainment\",\r\n  \"status\": \"SCHEDULED\",\r\n  \"airline\": {\r\n    \"airlineId\": 2\r\n  },\r\n  \"departureAirport\": {\r\n    \"airportId\": 1\r\n  },\r\n  \"arrivalAirport\": {\r\n    \"airportId\": 2\r\n  },\r\n  \"price\": {\r\n    \"priceId\" : 2\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"johndoe@gmail.com\",\n    \"password\": \"johniscool11\",\n    \"phone\": 98765433,\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"dateOfBirth\": \"01.01.1991\",\n    \"country\": \"Norway\",\n    \"gender\": \"Male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"bobdoe@gmail.com\",\n    \"password\": \"bobiscool11\",\n    \"phone\": 98765333,\n    \"firstName\": \"Bob\",\n    \"lastName\": \"Doe\",\n    \"dateOfBirth\": \"01.01.1991\",\n    \"country\": \"Norway\",\n    \"gender\": \"Male\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all bookings initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/bookings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookingDate\": \"2025-04-03T14:00:00\",\r\n  \"user\": {\r\n    \"userId\": 1\r\n  },\r\n  \"numberOfTravellers\" : 3\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/bookings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookingDate\": \"2025-04-03T14:00:00\",\r\n  \"user\": {\r\n    \"userId\": 1\r\n  },\r\n  \"numberOfTravellers\" : 3\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/bookings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add flight to booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n  \"flightNumber\": \"AA12SADA3\",\r\n  \"departureTime\": \"2025-06-15T14:30:00\",\r\n  \"arrivalTime\": \"2025-06-15T18:45:00\",\r\n  \"roundTrip\": true,\r\n  \"status\": \"SCHEDULED\",\r\n  \"airline\": {\r\n    \"airlineId\": 1\r\n  },\r\n  \"departureAirport\": {\r\n    \"airportId\": 1\r\n  },\r\n  \"arrivalAirport\": {\r\n    \"airportId\": 2\r\n  }\r\n}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/bookings/1/flights",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings",
								"1",
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all bookings copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/bookings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking by id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/bookings/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete booking 2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/bookings/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking 2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/bookings/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update booking",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookingId\": 1,\r\n    \"bookingDate\": \"2025-04-13T15:00:00\",\r\n    \"numberOfTravellers\" : 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/bookings/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var expectedBookingData = {\r",
									"    \"bookingId\": 1,\r",
									"    \"bookingDate\": \"2025-04-13T15:00:00\",\r",
									"    \"numberOfTravellers\" : 3,\r",
									"    \"user\": {\r",
									"        \"userId\": 1,\r",
									"        \"email\": \"chuck@gmail.com\",\r",
									"        \"password\": \"$2a$10$HcsiYQYVGKwNts1RQTdR.Ol6b5/ysHbcck2RAAnRYqTW4V5mjbfV6\",\r",
									"        \"phone\": \"+4799887766\",\r",
									"        \"firstName\": \"Chuck\",\r",
									"        \"lastName\": \"Norris\",\r",
									"        \"dateOfBirth\": \"02.02.1992\",\r",
									"        \"country\": \"United States\",\r",
									"        \"gender\": \"Male\",\r",
									"        \"role\": \"ADMIN\",\r",
									"        \"createdAt\": \"2025-05-19T12:55:28.571663\"\r",
									"    },\r",
									"    \"flights\": [\r",
									"        {\r",
									"            \"flightId\": 3,\r",
									"            \"airline\": {\r",
									"                \"airlineId\": 1,\r",
									"                \"name\": \"SAS\",\r",
									"                \"code\": \"SK\",\r",
									"                \"country\": \"Norway\",\r",
									"                \"logoFileName\": \"sas\"\r",
									"            },\r",
									"            \"flightNumber\": \"AA12SADA3\",\r",
									"            \"departureAirport\": {\r",
									"                \"airportId\": 1,\r",
									"                \"name\": \"Vigra\",\r",
									"                \"code\": \"AES\",\r",
									"                \"city\": \"Ålesund\",\r",
									"                \"country\": \"Norway\"\r",
									"            },\r",
									"            \"arrivalAirport\": {\r",
									"                \"airportId\": 2,\r",
									"                \"name\": \"Gardermoen\",\r",
									"                \"code\": \"OSL\",\r",
									"                \"city\": \"Oslo\",\r",
									"                \"country\": \"Norway\"\r",
									"            },\r",
									"            \"departureTime\": \"2025-06-15T14:30:00\",\r",
									"            \"arrivalTime\": \"2025-06-15T18:45:00\",\r",
									"            \"roundTrip\": true,\r",
									"            \"extraFeatures\": null,\r",
									"            \"availableClasses\": null,\r",
									"            \"status\": \"SCHEDULED\",\r",
									"            \"prices\": []\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches the expected booking data (excluding user.password and user.createdAt)\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"\r",
									"    // Clone both objects to avoid mutating originals\r",
									"    var actual = _.cloneDeep(responseJSON);\r",
									"    var expected = _.cloneDeep(expectedBookingData);\r",
									"\r",
									"    // Remove the fields to ignore\r",
									"    delete actual.user.password;\r",
									"    delete actual.user.createdAt;\r",
									"\r",
									"    delete expected.user.password;\r",
									"    delete expected.user.createdAt;\r",
									"\r",
									"    // Compare the sanitized objects\r",
									"    pm.expect(actual).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/bookings/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another booking copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookingDate\": \"2025-04-10T16:00:00\",\r\n  \"user\": {\r\n    \"userId\": 1\r\n  },\r\n  \"numberOfTravellers\" : 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/bookings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/bookings/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all flights final",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/bookings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each booking contains bookingId, bookingDate and numberOfTravellers\", function () {\r",
									"    const bookings = pm.response.json();\r",
									"    bookings.forEach(booking => {\r",
									"        pm.expect(booking).to.have.property(\"bookingId\");\r",
									"        pm.expect(booking).to.have.property(\"bookingDate\");\r",
									"        pm.expect(booking).to.have.property(\"numberOfTravellers\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Flights are included in each booking (if any)\", function () {\r",
									"    const bookings = pm.response.json();\r",
									"    bookings.forEach(booking => {\r",
									"        pm.expect(booking).to.have.property(\"flights\");\r",
									"        pm.expect(booking.flights).to.be.an(\"array\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookingDate\": \"2025-04-03T14:00:00\",\r\n  \"user\": {\r\n    \"userId\": 1\r\n  },\r\n  \"numberOfTravellers\" : 2\r\n}\r\n"
						},
						"url": {
							"raw": "{{BASE_URL}}/bookings/user/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"bookings",
								"user",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feedback",
			"item": [
				{
					"name": "Get all feedback initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array in the body contains exactly 0 objects\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new feedback",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Creates a dummy-user with ID as a parameter\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"BASE_URL\") + \"/users\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"firstName\": \"Feedback\",\r",
									"            \"lastName\": \"User\",\r",
									"            \"email\": \"feedbackuser@example.com\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (!err && res.code === 201) {\r",
									"        const user = res.json();\r",
									"        pm.environment.set(\"feedback_user_id\", user.userId);\r",
									"    } else {\r",
									"        console.error(\"Failed to create user:\", err || res.status);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"Dette er en testkommentar\",\r\n  \"rating\": 5,\r\n  \"user\": {\r\n    \"userId\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/feedback",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all feedback after insert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array contains exactly 1 object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get feedback by user ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned feedback matches expected comment\", function () {\r",
									"    const feedback = pm.response.json();\r",
									"    pm.expect(feedback).to.have.property(\"comment\", \"Dette er en testkommentar\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get feedback by feedback ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned feedback has correct ID and comment\", function () {\r",
									"    const feedback = pm.response.json();\r",
									"    pm.expect(feedback).to.have.property(\"feedbackId\", 1);\r",
									"    pm.expect(feedback).to.have.property(\"comment\", \"Dette er en testkommentar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Feedback includes required fields\", function () {\r",
									"    const feedback = pm.response.json();\r",
									"    pm.expect(feedback).to.have.property(\"rating\");\r",
									"    pm.expect(feedback).to.have.property(\"createdAt\");\r",
									"    pm.expect(feedback).to.have.property(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new feedback with new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Oppretter en dummy-bruker og lagrer userId til miljøvariabel\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"BASE_URL\") + \"/users\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"firstName\": \"Andre\",\r",
									"            \"lastName\": \"Bruker\",\r",
									"            \"email\": \"feedbackuser2@example.com\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (!err && res.code === 201) {\r",
									"        const user = res.json();\r",
									"        pm.environment.set(\"feedback_user_id\", user.userId);\r",
									"    } else {\r",
									"        console.error(\"Failed to create user:\", err || res.status);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"Dette er en en god nettside, men jeg er bare en test\",\r\n  \"rating\": 4,\r\n  \"user\": {\r\n    \"userId\": 2\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/feedback",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get feedback after new insert and validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The JSON array contains exactly 2 objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(2);\r",
									"});\r",
									"\r",
									"// Validates that at least one of the comments is the updated one.\r",
									"pm.test(\"One of the feedback comments is the new one\", function () {\r",
									"    const comments = pm.response.json().map(fb => fb.comment);\r",
									"    pm.expect(comments).to.include(\"Dette er en en god nettside, men jeg er bare en test\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "New feedback from existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"En ny kommentar fra samme bruker\",\r\n  \"rating\": 4,\r\n  \"user\": {\r\n    \"userId\": 1\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/feedback",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all feedback from userId = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User 1 has exactly 2 feedback entries\", function () {\r",
									"    const feedbackList = pm.response.json();\r",
									"    pm.expect(feedbackList).to.be.an('array').that.has.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Feedback entries belong to user 1\", function () {\r",
									"    const feedbackList = pm.response.json();\r",
									"    feedbackList.forEach(fb => {\r",
									"        pm.expect(fb.user.userId).to.eql(1);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback/user/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an excisting feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feedbackId\": 1,\r\n  \"comment\": \"Oppdatert kommentar – dette var faktisk veldig bra!\",\r\n  \"rating\": 4,\r\n  \"createdAt\": \"03.04.2025 10:40\",\r\n  \"user\": {\r\n    \"userId\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/feedback/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm updated feedback with ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated fields are correct\", function () {\r",
									"    const feedback = pm.response.json();\r",
									"    pm.expect(feedback).to.have.property(\"comment\", \"Oppdatert kommentar – dette var faktisk veldig bra!\");\r",
									"    pm.expect(feedback).to.have.property(\"rating\", 4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete feedback with ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - Deleted successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - All feedback deleted\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm feedback list is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Feedback list is empty\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\").that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/feedback",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"feedback"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}